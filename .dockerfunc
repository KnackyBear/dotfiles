#!/bin/bash
# Bash wrappers for docker run commands
# Inspired by Jess Frazelle <jess@linux.com>

#
# Helper Functions
#
dcleanup(){
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}

pcleanup(){
	podman container prune -f
	podman volume prune -f
	podman rmi -a 2> /dev/null
}

dkill(){
	for container in "$@"; do
		local name=$container
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

		if [[ "$state" == "true" ]]; then
			echo "Container $name still running... stop it for you."
			docker stop "$name"
		fi
		del_stopped "$name"
	done
}

podkill(){
	for container in "$@"; do
		local name=$container
		local state
		state=$(podman container inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

		if [[ "$state" == "true" ]]; then
			echo "Container $name still running... stop it for you."
			podman container stop "$name"
		fi
		podman container rm "$name"
	done

}

del_stopped(){
	for container in "$@"; do
		local name=$container
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

		if [[ "$state" == "false" ]]; then
			docker rm "$name"
		fi
	done
}

del_stopped_app(){
	local appname=$1
	local state

	for id in $(docker ps -a --filter label="app=$appname")
	do
		state=$(docker inspect --format "{{.State.Running}}" "$id" 2>/dev/null)
		if [[ "$state" == "false" ]]; then
			docker rm "$id"
		fi
	done
}

rmctr(){
	# shellcheck disable=SC2068
	docker rm -f $@ 2>/dev/null || true
}

relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}

#
# Others
#

ansible() {
	docker run --rm \
 		-it \
 		-v ${PWD}/hosts:/etc/ansible/hosts \
 		-v ${PWD}/ansible.cfg:/etc/ansible/ansible.cfg \
 		-v ${HOME}/.ssh:/root/.ssh:ro \
 		jnvinet/ansible "$@"
}

calibre(){
	dkill calibre

	docker run -d \
		--net host \
		-v /etc/localtime:/etc/localtime:ro \
   		-v /etc/passwd:/etc/passwd:ro \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "${HOME}:${HOME}" \
		--device /dev/bus/usb \
   		-u $(id -u):$(id -g) \
		--name calibre \
		jnvinet/calibre "$@"
}

chrome(){
	dkill chrome

	# add flags for proxy if passed
	local proxy=
	local map
	local args=$*

	if [[ "$1" == "tor" ]]; then
		relies_on torproxy

		map="MAP * ~NOTFOUND , EXCLUDE torproxy"
		proxy="socks5://torproxy:9050"
		args="https://check.torproject.org/api/ip ${*:2}"
	fi

	docker run -d \
		--memory 3gb \
		--net host \
		-v /etc/localtime:/etc/localtime:ro \
   		-v /etc/passwd:/etc/passwd:ro \
		-e "DISPLAY=unix${DISPLAY}" \
		-v "${HOME}:${HOME}" \
		-e "PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native" \
   		-v "${XDG_RUNTIME_DIR}/pulse/native:${XDG_RUNTIME_DIR}/pulse/native" \
		-v /dev/shm:/dev/shm \
		-v /etc/hosts:/etc/hosts \
		--security-opt seccomp:/etc/docker/seccomp/chrome.json \
		--device /dev/snd \
		--device /dev/dri \
		--device /dev/video0 \
		--device /dev/bus/usb \
		--group-add audio \
		--group-add video \
   		-u $(id -u):$(id -g) \
		--name chrome \
		jnvinet/chrome \
		--proxy-server="$proxy" \
		--host-resolver-rules="$map" "$args"
}

dev() {
	podman run -it --rm \
		--net host \
		-v $PWD:/build \
		--name devbox \
		jnvinet/devbox "$@"
}

firefox(){
	del_stopped firefox

	docker run -d \
		--memory 2gb \
		--net host \
		--cpuset-cpus 0 \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/passwd:/etc/passwd:ro \
		-v "${HOME}:${HOME}" \
		-e "DISPLAY=unix${DISPLAY}" \
		-e "PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native" \
    	-v "${XDG_RUNTIME_DIR}/pulse/native:${XDG_RUNTIME_DIR}/pulse/native" \
		--device /dev/snd \
		--device /dev/dri \
		-u $(id -u):$(id -g) \
		--name firefox \
		jnvinet/firefox "$@"

	# exit current shell
	exit 0
}

gimp(){
	del_stopped gimp
	
	docker run -d \
		--net host \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/passwd:/etc/passwd:ro \
		-v "${HOME}:${HOME}" \
		-e "DISPLAY=unix${DISPLAY}" \
		-u $(id -u):$(id -g) \
		--name gimp \
		jnvinet/gimp "$@"
}

hostess() {
	docker run --rm -it \
		-v /etc/hosts:/etc/hosts \
		--name hostess \
		jnvinet/hostess "$@"
}

intellij() {
	del_stopped intellij

	docker run -d \
		--net host \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/passwd:/etc/passwd:ro \
		-v "${HOME}:${HOME}" \
		-e "DISPLAY=unix${DISPLAY}" \
		-u $(id -u):$(id -g) \
		--name intellij \
		jnvinet/intellij "$@"
}

kafka() {
	del_stopped kafka
	relies_on zookeeper

	docker run -d \
		--net host \
		--name=kafka \
		-e KAFKA_ZOOKEEPER_CONNECT=localhost:32181 \
		-e KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092 \
		-e KAFKA_BROKER_ID=2 \
		-e KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1 \
		confluentinc/cp-kafka:5.3.0
}

kafka-topics() {
	docker run --net host --rm -it confluentinc/cp-kafka:5.3.0 kafka-topics "$@"
}

kafka-console-consumer() {
	docker run --net host --rm -it confluentinc/cp-kafka:5.3.0 kafka-console-consumer "$@"
}

# creates an nginx config for a local route
nginx_config(){
	server=$1
	route=$2

	cat >"${HOME}/.nginx/conf.d/${server}.conf" <<-EOF
	upstream ${server} { server ${route}; }
	server {
	server_name ${server};
	location / {
	proxy_pass  http://${server};
	proxy_http_version 1.1;
	proxy_set_header Upgrade \$http_upgrade;
	proxy_set_header Connection "upgrade";
	proxy_set_header Host \$http_host;
	proxy_set_header X-Forwarded-Proto \$scheme;
	proxy_set_header X-Forwarded-For \$remote_addr;
	proxy_set_header X-Forwarded-Port \$server_port;
	proxy_set_header X-Request-Start \$msec;
}
	}
	EOF

	# restart nginx
	docker restart nginx

	# add host to /etc/hosts
	hostess add "$server" 127.0.0.1

	# open browser
	browser-exec "http://${server}"
}

nginx(){
	podman container rm nginx || true

	podman run -d \
		--restart always \
		-v "${HOME}/.nginx:/etc/nginx" \
		--name nginx \
		nginx

	# add domain to hosts & open nginx
	hostess add mynginx 127.0.0.1
}

#spotify(){
#	podman container stop spotify && podman container rm spotify || echo "Container spotify not running..."
#
#	podman run -d \
#		--net host \
#		-v "${HOME}/.config/spotify:/root/.config/spotify" \
#		-e "DISPLAY=unix${DISPLAY}" \
#		-e "PULSE_SERVER=unix:${XDG_RUNTIME_DIR}/pulse/native" \
#   	-v "${XDG_RUNTIME_DIR}/pulse/native:${XDG_RUNTIME_DIR}/pulse/native" \
#		--device /dev/snd \
#		--device /dev/dri \
#		--name spotify \
#		jnvinet/spotify "--force-device-scale-factor=1.5 $@"
#}

torproxy(){
	podman container stop torproxy && podman container rm torproxy || echo "Container torproxy not running..."

	podman run -d \
		--restart always \
		-v /etc/localtime:/etc/localtime:ro \
		-p 9050:9050 \
		--name torproxy \
		jnvinet/tor-proxy

	#hostess add torproxy "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' torproxy)"
	hostess add torproxy 127.0.0.1
}

vs(){
	del_stopped_app vscodium

	local uuid 
	UUID=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 12 | head -n 1)

	docker run -d \
		--net host \
		-v /etc/localtime:/etc/localtime:ro \
		-v /etc/passwd:/etc/passwd:ro \
		-v "${HOME}:${HOME}" \
		-e "DISPLAY=unix${DISPLAY}" \
		--device /dev/dri \
		-u $(id -u):$(id -g) \
		-w $(pwd) \
		--name vscodium-$UUID \
		jnvinet/vscodium "$@"
}

zookeeper() {
	del_stopped zookeeper

	docker run -d \
		--net=host \
		--name=zookeeper \
		-e ZOOKEEPER_CLIENT_PORT=32181 \
		-e ZOOKEEPER_TICK_TIME=2000 \
		-e ZOOKEEPER_SYNC_LIMIT=2 \
		confluentinc/cp-zookeeper:5.3.0
}
